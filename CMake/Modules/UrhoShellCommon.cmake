#
# Copyright (c) 2021-2022 Yuriy Zinchenko.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

SET (DEST_CONFIG_DIR lib/cmake/${CMAKE_PROJECT_NAME})
SET (DEST_INCLUDE_DIR include/${CMAKE_PROJECT_NAME})
SET (DEST_LIBRARY_DIR lib)
SET (DEST_PKGCONFIG_DIR lib/pkgconfig)
SET (DEST_TEMPLATE_DIR share/${CMAKE_PROJECT_NAME})

IF (MINGW)
	SET (CMAKE_SHARED_LIBRARY_PREFIX "")
ENDIF ()

OPTION (URHO3DSHELL_LTO "Enable linking-time optimisations" OFF)
OPTION (URHO3DSHELL_SAMPLE "Enable game library sample build" ON)
OPTION (URHO3DSHELL_WARNINGS "Enable compiller warnings" OFF)
MARK_AS_ADVANCED (URHO3DSHELL_LTO)
MARK_AS_ADVANCED (URHO3DSHELL_SAMPLE)
MARK_AS_ADVANCED (URHO3DSHELL_WARNINGS)

INCLUDE (CMakePackageConfigHelpers REQUIRED)
INCLUDE (GenerateExportHeader REQUIRED)
INCLUDE (UrhoCommon REQUIRED)
IF (PROJECT_LTO)
	INCLUDE (CheckIPOSupported REQUIRED)
ENDIF ()

FIND_PROGRAM (CLANG_FORMAT "clang-format")
IF (CLANG_FORMAT)
	FILE (GLOB_RECURSE ALL_SOURCE_FILES ${CMAKE_SOURCE_DIR}/*.cpp)
	FILE (GLOB_RECURSE ALL_HEADER_FILES ${CMAKE_SOURCE_DIR}/*.h)
	ADD_CUSTOM_TARGET (
		FORMAT
		COMMAND ${CLANG_FORMAT}
		-i
		-style=file
		${ALL_SOURCE_FILES}
		${ALL_HEADER_FILES}
	)
ENDIF ()

SET (CMAKE_MODULES_PATH "${CMAKE_SOURCE_DIR}/CMake/Modules")
IF (EXISTS ${CMAKE_MODULES_PATH})
	INSTALL (DIRECTORY "${CMAKE_MODULES_PATH}/" DESTINATION ${DEST_CONFIG_DIR})
ENDIF ()

IF (NOT URHO3DSHELL_TEMPLATE_DIR)
	SET (URHO3DSHELL_TEMPLATE_DIR ${CMAKE_SOURCE_DIR}/CMake/Templates)
	FILE (GLOB TEMPLATE_FILES ${URHO3DSHELL_TEMPLATE_DIR}/*.in)
	INSTALL (FILES ${TEMPLATE_FILES} DESTINATION ${DEST_TEMPLATE_DIR})
ENDIF ()

MACRO (SETUP_GAME_LAUNCHER)
	CMAKE_PARSE_ARGUMENTS (ARG "HEADLESS" "" "" ${ARGN})

	IF (WIN32 AND NOT ARG_HEADLESS AND NOT ${CMAKE_BUILD_TYPE} STREQUAL "Debug")
		SET (APP_MODIFIERS WIN32)
	ENDIF ()

	LIST (APPEND LIBS Urho3DShell)
	SETUP_EXECUTABLE (NODEPS ${APP_MODIFIERS})
	APPLY_TARGET_SETTINGS ()
	_PACKAGE_RESOURCES ()
ENDMACRO ()

MACRO (SETUP_SHELL_LIBRARY)
	# Exclude AngelScript bindings if AngelScript is disabled
	IF (NOT URHO3D_ANGELSCRIPT)
		STRING (REGEX REPLACE "(ScriptAPI/AngelScript/)[A-Za-z/.]+" "" SOURCE_FILES "${SOURCE_FILES}")
		STRING (REGEX REPLACE "(Config/ScriptParameter.)[cph]+" "" SOURCE_FILES "${SOURCE_FILES}")
	ENDIF ()

	# Library project definition
	SETUP_LIBRARY (SHARED)
	APPLY_TARGET_SETTINGS ()
	_PACKAGE_RESOURCES ()

	LIST (APPEND DEPENDENCY_LIBRARIES ${TARGET_NAME})
	SET_TARGET_PROPERTIES (${TARGET_NAME} PROPERTIES DEPENDENCY_LIBRARIES "${DEPENDENCY_LIBRARIES}")
	SET_TARGET_PROPERTIES (${TARGET_NAME} PROPERTIES DEPENDENCY_PACKAGES "${DEPENDENCY_PACKAGES}")

	# Basic library install
	INSTALL	(TARGETS ${TARGET_NAME} EXPORT ${TARGET_NAME})
	FOREACH (PUBLIC_HEADER ${PUBLIC_H_FILES})
		STRING (REGEX MATCH "(.*)[/\\]" HEADER_PATH ${PUBLIC_HEADER})
		INSTALL (FILES ${PUBLIC_HEADER} DESTINATION ${DEST_INCLUDE_DIR}/${HEADER_PATH})
	ENDFOREACH ()

	# Library export header
	SET (TARGET_EXPORT_HEADER "${TARGET_NAME}API.h")
	GENERATE_EXPORT_HEADER (${TARGET_NAME} BASE_NAME "${TARGET_NAME}API" EXPORT_FILE_NAME ${TARGET_EXPORT_HEADER})
	INSTALL_HEADER_FILES (FILES ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_EXPORT_HEADER} DESTINATION ${DEST_INCLUDE_DIR} ACCUMULATE GENERATED_HEADERS)

	# Install Urho3D library
	IF (WIN32 AND URHO3D_LIB_TYPE STREQUAL SHARED)
		FOREACH (DLL ${URHO3D_DLL})
			ADD_CUSTOM_COMMAND (TARGET ${TARGET_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different "${DLL}" "${CMAKE_BINARY_DIR}/bin")
			ADD_MAKE_CLEAN_FILES (${RUNTIME_DIR}/${DLL})
		ENDFOREACH ()
		INSTALL (FILES ${URHO3D_DLL} DESTINATION bin)
	ENDIF ()

	# Export library
	SET (CONFIG_INSTALL_DIR ${DEST_CONFIG_DIR}/)
	SET (RUNTIME_INSTALL_DIR bin/)
	SET (TEMPLATE_INSTALL_DIR ${DEST_TEMPLATE_DIR}/)

	TARGET_INCLUDE_DIRECTORIES (${TARGET_NAME} PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
		$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
		$<INSTALL_INTERFACE:${DEST_INCLUDE_DIR}>
	)

	EXPORT (TARGETS ${TARGET_NAME} FILE "${TARGET_NAME}Targets.cmake")
	INSTALL (EXPORT ${TARGET_NAME} FILE "${TARGET_NAME}Targets.cmake" DESTINATION ${DEST_CONFIG_DIR} EXPORT_LINK_INTERFACE_LIBRARIES)

	CONFIGURE_PACKAGE_CONFIG_FILE (
		"${URHO3DSHELL_TEMPLATE_DIR}/LibraryConfig.cmake.in"
		"${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}Config.cmake"
		INSTALL_DESTINATION ${DEST_CONFIG_DIR}
		PATH_VARS
		CONFIG_INSTALL_DIR
		RUNTIME_INSTALL_DIR
		TEMPLATE_INSTALL_DIR
	)
	WRITE_BASIC_PACKAGE_VERSION_FILE (
		"${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}ConfigVersion.cmake"
		VERSION ${PROJECT_VERSION}
		COMPATIBILITY SameMajorVersion
	)
	INSTALL (FILES
		"${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}Config.cmake"
		"${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}ConfigVersion.cmake"
		DESTINATION ${DEST_CONFIG_DIR}
	)
ENDMACRO ()

MACRO (SETUP_GAME_LIBRARY)
	CMAKE_PARSE_ARGUMENTS (ARG "" "LIB" "" ${ARGN})
	
	GET_TARGET_PROPERTY (UPSTREAM_LIBRARIES ${ARG_LIB} DEPENDENCY_LIBRARIES)
	GET_TARGET_PROPERTY (UPSTREAM_PACKAGES ${ARG_LIB} DEPENDENCY_PACKAGES)
	GET_TARGET_PROPERTY (RUNTIME_DIR ${ARG_LIB} RUNTIME_DIR)
	SET (DEPENDENCY_LIBRARIES ${UPSTREAM_LIBRARIES})
	SET (DEPENDENCY_PACKAGES ${UPSTREAM_PACKAGES})

	LIST (APPEND LIBS ${DEPENDENCY_LIBRARIES})
	SETUP_SHELL_LIBRARY ()

	IF (NOT ${CMAKE_PROJECT_NAME} STREQUAL "Urho3DShell")
		SET (LIBRARIES "")
		FOREACH (LIB ${DEPENDENCY_LIBRARIES})
			GET_TARGET_PROPERTY (LIBRARY_CONFIG ${LIB} IMPORTED_CONFIGURATIONS)
			GET_TARGET_PROPERTY (LIBRARY_FILENAME ${LIB} IMPORTED_LOCATION_${LIBRARY_CONFIG})
			LIST (APPEND LIBRARIES ${RUNTIME_DIR}${LIBRARY_FILENAME})
		ENDFOREACH ()
		FILE (COPY ${LIBRARIES} DESTINATION bin)
		INSTALL (FILES ${LIBRARIES} DESTINATION bin)

		IF (URHO3D_PACKAGING AND DEPENDENCY_PACKAGES)
			SET (PACKAGES "")
			FOREACH (PAK ${DEPENDENCY_PACKAGES})
				LIST (APPEND PACKAGES ${RUNTIME_DIR}${PAK}.pak)
			ENDFOREACH ()
			FILE (COPY ${PACKAGES} DESTINATION bin)
			INSTALL (FILES ${PACKAGES} DESTINATION bin)
		ENDIF ()
	ENDIF ()
ENDMACRO ()

MACRO (APPLY_TARGET_SETTINGS)
	SET_TARGET_PROPERTIES (${TARGET_NAME} PROPERTIES DEBUG_POSTFIX _d)

	IF (URHO3DSHELL_WARNINGS)
		TARGET_COMPILE_OPTIONS (${TARGET_NAME} PRIVATE
			$<$<CXX_COMPILER_ID:MSVC>:/W4 /WX>
			$<$<NOT:$<CXX_COMPILER_ID:MSVC>>:
				-Wall -Wextra -Wpedantic -Werror -Wnon-virtual-dtor
				-Woverloaded-virtual -Wsign-promo
				-Wshadow=compatible-local -Wconversion
				-Wzero-as-null-pointer-constant -Wextra-semi>
		)
	ENDIF ()

	IF (URHO3DSHELL_LTO)
		CHECK_IPO_SUPPORTED (RESULT LTO_SUPPORTED)
		IF (LTO_SUPPORTED)
			SET_PROPERTY (TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
		ENDIF ()
	ENDIF ()
ENDMACRO ()

# Original code of this macro from Urho3D (UrhoCommon.cmake line 1690).
# Separated to a macro, because original one supports only executables.
# Changelog (to provide pull request):
# - Fixed multiple targets resources support (IF (NOT ${RESOURCE_CHECK_${MD5ALL}}))
MACRO (_PACKAGE_RESOURCES)
	IF ((EXE_TYPE STREQUAL MACOSX_BUNDLE OR URHO3D_PACKAGING) AND RESOURCE_DIRS)
		IF (URHO3D_PACKAGING)
			FIND_URHO3D_TOOL (PACKAGE_TOOL PackageTool HINTS ${URHO3D_HOME}/bin/tool DOC "Path to PackageTool" MSG_MODE WARNING)
			SET (PACKAGING_COMMENT " and packaging")
		ENDIF ()
		FOREACH (DIR ${RESOURCE_DIRS})
			STRING (MD5 MD5 ${DIR})
			SET (MD5ALL ${MD5ALL}${MD5})
			IF (CMAKE_HOST_WIN32)
				IF (URHO3D_PACKAGING)
					SET (PACKAGING_COMMAND && echo Packaging ${DIR}... &&
						 ${PACKAGE_TOOL} ${DIR} ${RESOURCE_${DIR}_PATHNAME}.new -c -q &&
						 ${CMAKE_COMMAND} -E copy_if_different ${RESOURCE_${DIR}_PATHNAME}.new ${RESOURCE_${DIR}_PATHNAME} &&
						 ${CMAKE_COMMAND} -E remove ${RESOURCE_${DIR}_PATHNAME}.new
					)
				ENDIF ()
				LIST (APPEND COMMANDS COMMAND ${CMAKE_COMMAND} -E touch ${DIR} ${PACKAGING_COMMAND})
			ELSE ()
				IF (URHO3D_PACKAGING)
					SET (PACKAGING_COMMAND && echo Packaging ${DIR}... && ${PACKAGE_TOOL} ${DIR} ${RESOURCE_${DIR}_PATHNAME} -c -q)
					SET (OUTPUT_COMMAND test -e ${RESOURCE_${DIR}_PATHNAME} || \( true ${PACKAGING_COMMAND} \))
				ELSE ()
					SET (OUTPUT_COMMAND true)
				ENDIF ()
				LIST (APPEND COMMANDS COMMAND
					  echo Checking ${DIR}... &&
					  bash -c \"\(\( `find ${DIR} -newer ${DIR} |wc -l` \)\)\" &&
					  touch -cm ${DIR} ${PACKAGING_COMMAND} || ${OUTPUT_COMMAND}
				)
			ENDIF ()
			INSTALL (FILES ${RESOURCE_${DIR}_PATHNAME} DESTINATION bin)
			ADD_MAKE_CLEAN_FILES (${RESOURCE_${DIR}_PATHNAME})
			GET_FILENAME_COMPONENT (FILENAME ${DIR} NAME)
			LIST (APPEND DEPENDENCY_PACKAGES ${FILENAME})
		ENDFOREACH ()
		STRING (MD5 MD5ALL ${MD5ALL})
		IF (NOT ${RESOURCE_CHECK_${MD5ALL}})
			SET (RESOURCE_CHECK RESOURCE_CHECK)
			WHILE (TARGET ${RESOURCE_CHECK})
				STRING (RANDOM RANDOM)
				SET (RESOURCE_CHECK RESOURCE_CHECK_${RANDOM})
			ENDWHILE ()
			SET (RESOURCE_CHECK_${MD5ALL} ${RESOURCE_CHECK} CACHE INTERNAL "Resource check hash map")
		ENDIF ()
		IF (NOT TARGET ${RESOURCE_CHECK_${MD5ALL}})
			ADD_CUSTOM_TARGET (${RESOURCE_CHECK_${MD5ALL}} ALL ${COMMANDS} ${PACKAGING_DEP} COMMENT "Checking${PACKAGING_COMMENT} resource directories")
		ENDIF ()
		ADD_DEPENDENCIES (${TARGET_NAME} ${RESOURCE_CHECK_${MD5ALL}})
	ENDIF ()
	IF (RESOURCE_DIRS AND DEST_SHARE_DIR)
		FOREACH (DIR ${RESOURCE_DIRS})
			LIST (FIND INSTALLED_RESOURCE_DIRS ${DIR} FOUND_INDEX)
			IF (FOUND_INDEX EQUAL -1)
				INSTALL (DIRECTORY ${DIR} DESTINATION ${DEST_SHARE_DIR}/resources)
				LIST (APPEND INSTALLED_RESOURCE_DIRS ${DIR})
			ENDIF ()
			SET (INSTALLED_RESOURCE_DIRS ${INSTALLED_RESOURCE_DIRS} CACHE INTERNAL "Installed resource dirs")
		ENDFOREACH ()
	ENDIF ()
	SET (RESOURCE_DIRS "")
ENDMACRO ()
