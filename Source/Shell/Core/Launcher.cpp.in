//
// Copyright (c) 2021 Yuriy Zinchenko.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include <algorithm>
#include <array>
#include <vector>
#include <boost/dll/import.hpp>
#include <boost/function.hpp>

#if defined (__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wwrite-strings"
#endif // defined (__GNUC__) || defined(__GNUG__)

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wwrite-strings"
#endif // defined(__clang__)

#define SETUP_FUNCTION "SetArguments"
#define LAUNCH_FUNCTION "LaunchShell"

#ifdef NDEBUG
#define LIBRARY_FILENAME "Urho3DShell"
#else
#define LIBRARY_FILENAME "Urho3DShell_d"
#endif // NDEBUG

int main(int argc, char** argv)
{
	setlocale(LC_ALL, "");
	using SetupFunc = void(int, char**);
	using LaunchFunc = int();
	boost::function<SetupFunc> setupFunc;
	boost::function<LaunchFunc> launchFunc;
	try
	{
		setupFunc =
			boost::dll::import<SetupFunc>(LIBRARY_FILENAME, SETUP_FUNCTION, boost::dll::load_mode::append_decorations);
		launchFunc =
			boost::dll::import<LaunchFunc>(LIBRARY_FILENAME, LAUNCH_FUNCTION, boost::dll::load_mode::append_decorations);
	}
	catch (boost::system::system_error& e)
	{
		fprintf(stderr, "An exception has occured: %s\n", e.what());
		return 1;
	}
	{
		const std::vector<char*> console_args { argv, argv + argc };
		const std::vector<char*> launcher_args
		{
			@LAUNCHER_ARGUMENTS@
		};
		std::vector<char*> result_args(console_args.size() + launcher_args.size());
		std::merge(launcher_args.begin(), launcher_args.begin(), console_args.begin(), console_args.end(), result_args.begin());
		setupFunc(static_cast<int>(result_args.size()), static_cast<char**>(result_args.data()));
	}
	return launchFunc();
}

#ifdef _WIN32
extern "C"
{
	__declspec(dllexport) unsigned NvOptimusEnablement = 1;
	__declspec(dllexport) int AmdPowerXpressRequestHighPerformance = 1;
}
#endif // _WIN32

#if defined (__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#endif // defined (__GNUC__) || defined(__GNUG__)

#if defined(__clang__)
#pragma clang diagnostic pop
#endif // defined(__clang__)
